apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: {{ include "applicationName" . }}
  labels:
    app: {{ include "applicationName" . }}
    version: {{ include "applicationVersion" . }}
spec:
  replicas: {{ .Values.deployment.replicas }}
  selector:
    matchLabels:
      app: {{ include "applicationName" . }}
  template:
    metadata:
      labels:
        app: {{ include "applicationName" . }}
        version: {{ include "applicationVersion" . }}
        tags.datadoghq.com/env: {{ .Values.environment }}
        tags.datadoghq.com/service: {{ include "applicationName" . }}
        tags.datadoghq.com/version: {{ include "applicationVersion" . }}
      annotations:
        sidecar.istio.io/inject: "true"
        {{- if .Values.deployment.alwaysRollPods }}
        alwaysRollPods: {{ randAlphaNum 5 | quote }}
        {{- end }}
    spec:
      containers:
        - name: {{ include "applicationName" . }}
          image: {{ include "deploymentFqim" . | quote }}
          env:
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: DD_ENV
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/env']
            - name: DD_SERVICE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/service']
            - name: DD_VERSION
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/version']
            - name: DD_PROFILING_ENABLED
              value: {{ .Values.dataDog.profilingEnabled | quote }}
            - name: DD_LOGS_INJECTION
              value: {{ .Values.dataDog.logsInjectionEnabled | quote }}
            - name: DD_RUNTIME_METRICS_ENABLED
              value: {{ .Values.dataDog.runtimeMetricsEnabled | quote }}
          envFrom:
            - configMapRef:
                name: {{ include "applicationName" . }}
            - secretRef:
                name: {{ include "applicationName" . }}
          ports:
            - containerPort: {{ .Values.deployment.containerPort }}
              protocol: "TCP"
          imagePullPolicy: Always
          resources:
            requests:
              cpu: {{ .Values.deployment.resources.requests.cpu | quote }}
              memory: {{ .Values.deployment.resources.requests.memory | quote }}
            limits:
              cpu: {{ .Values.deployment.resources.limits.cpu | quote }}
              memory: {{ .Values.deployment.resources.limits.memory | quote }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          startupProbe:
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
            failureThreshold: 3
            httpGet:
              path: /
              port: {{ .Values.deployment.containerPort }}
          readinessProbe:
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
            failureThreshold: 3
            httpGet:
              path: /readiness
              port: {{ .Values.deployment.containerPort }}
          livenessProbe:
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
            failureThreshold: 3
            httpGet:
              path: /liveness
              port: {{ .Values.deployment.containerPort }}
      terminationGracePeriodSeconds: 30
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ include "applicationName" . }}
              topologyKey: failure-domain.beta.kubernetes.io/zone
            weight: 100
      nodeSelector:
        agentpool: {{ .Values.deployment.agentPool }}
      tolerations:
      - key: workload
        operator: Equal
        value: {{ .Values.deployment.agentPool }}
        effect: NoSchedule
  strategy:
    canary:
      # These metadata blocks allow us to set ephemeral metadata
      # on the pods while they are 'stable' or 'canary'.
      # https://argoproj.github.io/argo-rollouts/features/ephemeral-metadata/
      stableMetadata:
        labels:
          role: stable
      canaryMetadata:
        labels:
          role: canary
      trafficRouting:
        istio:
          virtualService:
            name: {{ include "applicationName" . }}-external-virtual-service   # required
            routes:
            - primary            # optional if there is a single route in VirtualService, required otherwise
          destinationRule:
            name: {{ include "applicationName" . }}-destination-rule    # required
            canarySubsetName: canary  # required
            stableSubsetName: stable  # required
{{- if .Values.mesh.canary.requiresApproval }}
      steps:
      - setCanaryScale:
          replicas: {{ .Values.deployment.replicas }}
      - pause: {}
{{- end }}
{{- if eq .Values.mesh.canary.requiresApproval false }}
      steps:
      - setCanaryScale:
          replicas: {{ .Values.deployment.replicas }}
{{- end }}
